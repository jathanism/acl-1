1) install setuptools

2) install pip:
$ curl -O https://raw.github.com/pypa/pip/master/contrib/get-pip.py
$ [sudo] python get-pip.py

3) install python-dev:
sudo apt-get install python-dev

4) sudo pip install trigger:
sudo pip install trigger

5) Create configuration directory:
Trigger expects to find its configuration files to be in /etc/trigger. This can be customized using the PREFIX configuration variable within settings.py:

sudo mkdir /etc/trigger

6) Basic Configuration
For these steps you’ll need to download the Trigger tarball, expand it, and then navigate to the root directory (the same directory in which you’ll find setup.py).

Copy settings.py:
Trigger expects settings.py to be in /etc/trigger:

sudo cp conf/trigger_settings.py /etc/trigger/settings.py
If you really don’t like this, you may override the default location by setting the environment variable TRIGGER_SETTINGS to the desired location. If you go this route, you must make sure all Trigger-based tools have this set prior to any imports!

Copy autoacl.py:
Trigger’s autoacl module expects to find autoacl.py in the PREFIX. This is used to customize the automatic ACL associations for network devices.

sudo cp conf/autoacl.py /etc/trigger/autoacl.py
If you’re using a non-standard location, be sure to update the AUTOACL_FILE configuration variable within settings.py with the location of autoacl.py!

Copy metadata file:
Trigger’s netdevices module expects to find the device metadata file in PREFIX. This is used to customize the automatic ACL associations for network devices.

For the purpose of basic config, we’ll just use the sample netdevices.xml file:

sudo cp conf/netdevices.xml /etc/trigger/netdevices.xml










try:

>>> from trigger.acl import parse
>>> aclobj = parse("""access-list 123 permit tcp any host 10.20.30.40 eq 80""")
>>> aclobj.terms
[<Term: None>]

>>> aclobj.name_terms() # Juniper policy terms must have names
>>> aclobj.terms
[<Term: T1>]
>>> print '\n'.join(aclobj.output(format='junos'))
filter 123 {
    term T1 {
        from {
            destination-address {
                10.20.30.40/32;
            }
            protocol tcp;
            destination-port 80;
        }
        then {
            accept;
        }
    }
}




